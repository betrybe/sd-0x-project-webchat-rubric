<!DOCTYPE html>
<html>
  <head>
    <title>Socket.IO - trybe</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font: 13px Helvetica, Arial;
      }
      form {
        background: #000;
        padding: 3px;
        position: fixed;
        bottom: 0;
        width: 100%;
      }
      form input {
        border: 0;
        padding: 10px;
        width: 90%;
        margin-right: 0.5%;
      }
      form button {
        width: 9%;
        background: rgb(130, 224, 255);
        border: none;
        padding: 10px;
        cursor: pointer;
      }
      #messagens {
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      #messagens li {
        padding: 5px 10px;
      }
      #messagens li:nth-child(odd) {
        background: #eee;
      }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
  <body>
    <div id='contaner'>
    <div>
      <input type="text" name="" id="nickname", data-testid="nickname-box">
      <button 
      type="button"  
      data-testid="nickname-save"
      id='sendButton'
      > Save name
    </button>
  </div>
  <button 
    type="button"  
    data-testid="public"
    id='public-chat'
    > Go to Public
  </button>
  <h3>Chating with: 
    <h3 id='chat'></h3>
  </h3>
    <ul id='usersOnline'>
      <% usersOnline && usersOnline.forEach(user => { %>
        <li>
          <p data-testid="online-user"><%= user.nickname %></p>
          <button>Chat</button>
        </li>
        <%  })%>
    </ul>
    <ul id="messages">
      <% messages && messages.forEach(message => { console.log(message) %>
        <li>
          <p data-testid="message"><%= message %></p>
        </li>
        <%  })%>
    </ul>
    <form action="">
      <input id="messageInput" autocomplete="off" data-testid="message-box" />
      <button
       data-testid="send-button" data-testid="public"
       id="public-btn"
      >Send</button>
    </form>
  </div>
    <script>

const messageInput = document.getElementById('messageInput');
const messages = document.getElementById('messages');
const sendButton = document.getElementById('sendButton');
const nicknameElement = document.getElementById('nickname');
const usersOnlineElement = document.getElementById('usersOnline');
const chattingWithElement = document.getElementById('chat');

const publicChatButton = document.getElementById('public-chat');

const socket = io(); 

// publicChatButton.onclick = (message) =>{
//   socket.emit('send-message', message);
//   messages.innerHTML = '';
// }

const createChatMessage = (message) => {
  const li = document.createElement('li');
  console.log(message)

  li.setAttribute('data-testid', 'message');
  li.innerHTML = `
    <p className='message'>${message}</p>
  `;

  messages.appendChild(li);
};


socket.on('history', (messages) => {
  console.log(messages)
  messages.forEach((message) => createChatMessage(message));
});

let nickname = `Guest ${Math.random().toString().split('.')[1]}`

socket.emit('userConn', nickname)

sendButton.onclick = () => {
  const oldNickname = nickname;
  nickname = nicknameElement.value;

  socket.emit('userChangeName', { nickname: oldNickname, newName: nickname })
};

const generalChatBtn = document.querySelector('form');

generalChatBtn.addEventListener('submit', (e) => {
  e.preventDefault();
  const message = {
    chatMessage: messageInput.value,
    nickname,
  };
  socket.emit('message', message);
  console.log(message)
  messageInput.value = '';
});

const private = document.getElementById('private-btn');


socket.on('message', (message) => createChatMessage(message));

socket.on('online', (users) => {
  console.log(users)
  const ul = document.createElement('ul');
  users.forEach(({ nickname, id }) => {

    const p = document.createElement('li');
    p.setAttribute('data-testid','online-user');
    p.innerText = nickname;
    
    const li = document.createElement('li');

    li.appendChild(p);
    const btn = document.createElement('button');
    btn.setAttribute('data-testid', 'private');
    btn.innerText = 'Chat with me';
    btn.onclick = () => {
      chattingWithElement.innerText = nickname;
      // clear pub_history and create private history
      messages.innerHTML = '';
      socket.emit('getPVHistory', nickname)
    }
    btn.disabled = id !== socket.id
    li.appendChild(btn)
    ul.appendChild(li) 
  })
  usersOnlineElement.innerHTML = '';
  usersOnlineElement.appendChild(ul);
})

// socket.on('privateHistory', (history) =>{
//   history.forEach(message => createChatMessage(message))
// })
/* socket.on('disconnect', () => nickname); */
    </script>
  </body>
</html>
